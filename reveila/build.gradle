plugins {
    id 'java'
}

//apply plugin: 'com.android.library'
group 'com.reveila' // Replace with your desired group ID
version '1.0.0-SNAPSHOT' // Replace with your desired version
// Artifact ID (name)
// This is usually derived from the project directory name, but can be explicitly set if needed.
archivesBaseName = 'reveila'

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    //implementation 'com.google.guava:guava:32.1.1-jre'

    // To ensure this library can be used by both the Spring backend and the Android app
    // without causing dependency conflicts, we declare dependency versions explicitly.
    // These versions are aligned with the Spring Boot 3.3.1 BOM used by the :api project.
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.5.5')

    // This dependency is required by XmlUtil.java for XML/JSON conversion.
    // It is declared as 'implementation' to prevent its API from leaking to consumers.
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.1'

    // Dependencies for the RemoteInvoker component.
    // Jackson is used for JSON serialization/deserialization.
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'

    // OkHttp is a modern, efficient HTTP client for making remote calls.
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // This dependency is required for logging. The version is now managed by the
    // Spring Boot BOM for the backend build, but must be explicit for the mobile build.
    implementation 'org.slf4j:slf4j-api:2.0.13'

    // SLF4J simple implementation for logging
    implementation 'org.slf4j:slf4j-simple:2.0.13'
}

test {
    useJUnitPlatform()
}

tasks.register('task3') {
    println('REGISTER TASK3: This is executed during the configuration phase')
}

tasks.named('task3') {
    println('NAMED TASK3: This is executed during the configuration phase')
    doFirst {
        println('NAMED TASK3 - doFirst: This is executed during the execution phase')
    }
    doLast {
        println('NAMED TASK3 - doLast: This is executed during the execution phase')
    }
}